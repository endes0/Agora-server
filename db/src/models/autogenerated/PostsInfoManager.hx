// This is autogenerated file. Do not edit!

package models.autogenerated;

class PostsInfoManager
{
	var db : orm.Db;
	var orm : models.Orm;
	public var query(get, never) : orm.SqlQuery<models.PostsInfo>;

	function get_query() : orm.SqlQuery<models.PostsInfo>
	{
		return new orm.SqlQuery<models.PostsInfo>("posts_info", db, this);
	}

	public function new(db:orm.Db, orm:models.Orm) : Void
	{
		this.db = db;
		this.orm = orm;
	}

	function newModelFromParams(id:String, title:String, subtitle:String, overview:String, author_id:String, publish_date:Float, edit_date:Float, day_popularity:Int, total_popularity:Int, last_access:Float) : models.PostsInfo
	{
		var _obj = new models.PostsInfo(db, orm);
		_obj.id = id;
		_obj.title = title;
		_obj.subtitle = subtitle;
		_obj.overview = overview;
		_obj.author_id = author_id;
		_obj.publish_date = publish_date;
		_obj.edit_date = edit_date;
		_obj.day_popularity = day_popularity;
		_obj.total_popularity = total_popularity;
		_obj.last_access = last_access;
		return _obj;
	}

	function newModelFromRow(d:Dynamic) : models.PostsInfo
	{
		var _obj = new models.PostsInfo(db, orm);
		_obj.id = Reflect.field(d, 'id');
		_obj.title = Reflect.field(d, 'title');
		_obj.subtitle = Reflect.field(d, 'subtitle');
		_obj.overview = Reflect.field(d, 'overview');
		_obj.author_id = Reflect.field(d, 'author_id');
		_obj.publish_date = Reflect.field(d, 'publish_date');
		_obj.edit_date = Reflect.field(d, 'edit_date');
		_obj.day_popularity = Reflect.field(d, 'day_popularity');
		_obj.total_popularity = Reflect.field(d, 'total_popularity');
		_obj.last_access = Reflect.field(d, 'last_access');
		return _obj;
	}

	public function where(field:String, op:String, value:Dynamic) : orm.SqlQuery<models.PostsInfo>
	{
		return query.where(field, op, value);
	}

	public function get(id:String) : models.PostsInfo
	{
		return getBySqlOne('SELECT * FROM `posts_info` WHERE `id` = ' + db.quote(id));
	}

	public function create(id:String, title:String, subtitle:String, overview:String, author_id:String, publish_date:Float, edit_date:Float, day_popularity:Int, total_popularity:Int, last_access:Float) : models.PostsInfo
	{
		db.query('INSERT INTO `posts_info`(`id`, `title`, `subtitle`, `overview`, `author_id`, `publish_date`, `edit_date`, `day_popularity`, `total_popularity`, `last_access`) VALUES (' + db.quote(id) + ', ' + db.quote(title) + ', ' + db.quote(subtitle) + ', ' + db.quote(overview) + ', ' + db.quote(author_id) + ', ' + db.quote(publish_date) + ', ' + db.quote(edit_date) + ', ' + db.quote(day_popularity) + ', ' + db.quote(total_popularity) + ', ' + db.quote(last_access) + ')');
		return newModelFromParams(id, title, subtitle, overview, author_id, publish_date, edit_date, day_popularity, total_popularity, last_access);
	}

	public function createNamed(data:{ id:String, title:String, subtitle:String, overview:String, author_id:String, publish_date:Float, edit_date:Float, day_popularity:Int, total_popularity:Int, last_access:Float }) : models.PostsInfo
	{
		db.query('INSERT INTO `posts_info`(`id`, `title`, `subtitle`, `overview`, `author_id`, `publish_date`, `edit_date`, `day_popularity`, `total_popularity`, `last_access`) VALUES (' + db.quote(data.id) + ', ' + db.quote(data.title) + ', ' + db.quote(data.subtitle) + ', ' + db.quote(data.overview) + ', ' + db.quote(data.author_id) + ', ' + db.quote(data.publish_date) + ', ' + db.quote(data.edit_date) + ', ' + db.quote(data.day_popularity) + ', ' + db.quote(data.total_popularity) + ', ' + db.quote(data.last_access) + ')');
		return newModelFromParams(data.id, data.title, data.subtitle, data.overview, data.author_id, data.publish_date, data.edit_date, data.day_popularity, data.total_popularity, data.last_access);
	}

	public function createOptional(data:{ id:String, ?title:String, ?subtitle:String, ?overview:String, ?author_id:String, ?publish_date:Float, ?edit_date:Float, ?day_popularity:Int, ?total_popularity:Int, ?last_access:Float }) : models.PostsInfo
	{
		createOptionalNoReturn(data);
		return get(data.id);
	}

	public function createOptionalNoReturn(data:{ id:String, ?title:String, ?subtitle:String, ?overview:String, ?author_id:String, ?publish_date:Float, ?edit_date:Float, ?day_popularity:Int, ?total_popularity:Int, ?last_access:Float }) : Void
	{
		var fields = [];
		var values = [];
		fields.push('`id`'); values.push(db.quote(data.id));
		if (Reflect.hasField(data, 'title')) { fields.push('`title`'); values.push(db.quote(data.title)); }
		if (Reflect.hasField(data, 'subtitle')) { fields.push('`subtitle`'); values.push(db.quote(data.subtitle)); }
		if (Reflect.hasField(data, 'overview')) { fields.push('`overview`'); values.push(db.quote(data.overview)); }
		if (Reflect.hasField(data, 'author_id')) { fields.push('`author_id`'); values.push(db.quote(data.author_id)); }
		if (Reflect.hasField(data, 'publish_date')) { fields.push('`publish_date`'); values.push(db.quote(data.publish_date)); }
		if (Reflect.hasField(data, 'edit_date')) { fields.push('`edit_date`'); values.push(db.quote(data.edit_date)); }
		if (Reflect.hasField(data, 'day_popularity')) { fields.push('`day_popularity`'); values.push(db.quote(data.day_popularity)); }
		if (Reflect.hasField(data, 'total_popularity')) { fields.push('`total_popularity`'); values.push(db.quote(data.total_popularity)); }
		if (Reflect.hasField(data, 'last_access')) { fields.push('`last_access`'); values.push(db.quote(data.last_access)); }
		db.query('INSERT INTO `posts_info`(' + fields.join(", ") + ') VALUES (' + values.join(", ") + ')');
	}

	public function delete(id:String) : Void
	{
		db.query('DELETE FROM `posts_info` WHERE `id` = ' + db.quote(id) + ' LIMIT 1');
	}

	public function getAll(_order:String=null) : Array<models.PostsInfo>
	{
		return getBySqlMany('SELECT * FROM `posts_info`' + (_order != null ? ' ORDER BY ' + _order : ''));
	}

	public function getBySqlOne(sql:String) : models.PostsInfo
	{
		var rows = db.query(sql + ' LIMIT 1');
		if (rows.length == 0) return null;
		return newModelFromRow(rows.next());
	}

	public function getBySqlMany(sql:String) : Array<models.PostsInfo>
	{
		var rows = db.query(sql);
		var list : Array<models.PostsInfo> = [];
		for (row in rows)
		{
			list.push(newModelFromRow(row));
		}
		return list;
	}
}